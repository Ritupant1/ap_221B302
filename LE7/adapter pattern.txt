adapter pattern


public interface Crow {
    public abstract void cry();
    public abstract void fly();
    public abstract void eat();
    
}
public interface Swan {
    public abstract void swim();
    public abstract void sing();
    public abstract void eat();
    
}
public class IndianCrow implements crow {
    public void cry(){
        System.out.println("cowing");
        
    }
    public void fly() {
        System.out.println("fly over the mountain");
    }
    public void eat()  {
        System.out.println("eating pearls");
    }
}
public class CrowAdapter implements Swan{
    private Crow crow;
    public CrowAdapter(Crow crow){
        this.crow = crow;  }
        public void eat(){
            Crow.eat();
        }
        public void sing (){
            crow.cry();
        }
        public void swim(){
            crow.fly(); 
        }
    }
public class Application {
    public static void main (string args[]){
        Crow crow = new IndianCrow();
        CrowAdapter crowadapter = new CrowAdapter(crow);
        client (Crowadapter);
    }
    public static void client (Swan swan){
        swan.eat();
        swan.swim();
        swan.sing();
    }
}